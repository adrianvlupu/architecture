@startuml(id=SystemLandscape)
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
LAYOUT_WITH_LEGEND()

title System Landscape

Person(user, "User", "A user of our software system.")
System_Ext(clui, "CLUI", "CL UI toolkit for Node.js.")
System_Ext(chalk, "Chalk", "Terminal string styler.")
System_Ext(compromise, "Compromise", "NLP package.")
System_Ext(crowdin, "Crowdin", "Cloud-based localization management solution.")
System_Ext(gh, "GitHub", "Code Hosting and VCS")
System_Ext(inquirer, "Inquirer", "Collection of common interactive CLIs.")
System_Ext(limdu, "Limdu.js", "ML framework for Node.js")
System_Ext(logflare, "Logflare", "Log aggregation.")
System_Ext(nclr, "NClr", "Coloured logs (with symbols)")
System_Ext(nyc, "Name Your Contributors", "Package that gets all of the code reviewers, commenters, issue and PR creators from your organization or repo.")
System_Ext(netlify, "Netlify", "Cloud-based hosting platform for static sites, web apps and serverless functions.")
System_Ext(probot, "Probot", "GitHub App framework.")
System_Ext(tvtsplit, "TVT Split", "Dataset splitter into train/validation/test sets")
System_Ext(uptimer, "UptimeRobot", "Monitoring.")
System_Ext(vercel, "Vercel", "Cloud platform for static sites and serverless functions.")
System_Ext(yargs, "Yargs", "CLI argument parser and help section generator")
package "Enterprise" {
  Person(devs, "All Contributors team", "A core member of All Contributors.")
  System(ac, "All Contributors", "System for recognizing contributors to an open source project in a way that rewards each and every contribution.")
}
Rel_D(devs, ac, "maintain")
Rel_D(devs, vercel, "monitor")
Rel_D(ac, clui, "uses", "CJS import")
Rel_D(ac, chalk, "depends on", "CJS import")
Rel_D(ac, compromise, "uses", "CJS import")
Rel_D(ac, crowdin, "gets translations from", "Java/Yarn")
Rel_D(ac, gh, "listens to", "webhooks")
Rel_D(ac, inquirer, "uses", "CJS import")
Rel_D(ac, limdu, "uses", "CJS import")
Rel_D(ac, nclr, "uses", "CJS import")
Rel_D(ac, nyc, "uses", "CJS import")
Rel_D(ac, netlify, "hosted on", "??")
Rel_D(ac, probot, "implements", "CJS import")
Rel_D(ac, tvtsplit, "uses", "CJS import")
Rel_D(ac, vercel, "serviced by", "??")
Rel_D(ac, yargs, "depends on", "CJS import")
Rel_D(logflare, vercel, "listens to", "HTTPS")
Rel_D(uptimer, vercel, "monitors", "HTTPS")
Rel_D(user, ac, "interacts with")
@enduml